Vagrant.configure("2") do |config|
  # Specify the box and the provider
  config.vm.box = "generic/ubuntu2204"
  config.vm.provider :libvirt do |libvirt|
    # Use QEMU as the driver
    libvirt.driver = "qemu"
    # Specify 1 core and 1024MB of RAM
    libvirt.cpus = 1
    libvirt.memory = 1024
  end

  # This provision is common for both VMs
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update -y
    sudo apt-get install -y iputils-ping avahi-daemon libnss-mdns unzip \
        openjdk-17-jdk-headless
    # ifconfig
  SHELL

  # Configurations specific to the database VM
  config.vm.define "db" do |db|
    db.vm.hostname = "db"
    db.vm.network "private_network", ip: "192.168.56.11"

    # We want to access H2 console from the host using port 8082
    db.vm.network "forwarded_port", guest: 8082, host: 8082
    # We want to connect to the H2 server using port 9092
    db.vm.network "forwarded_port", guest: 9092, host: 9092

    # This downloads H2 database. To prevent compatibility issues we will use version 2.2.224
    db.vm.provision "shell", inline: <<-SHELL
      wget https://repo1.maven.org/maven2/com/h2database/h2/2.2.224/h2-2.2.224.jar
    SHELL

    # The following provision shell will ALWAYS run so that we can execute the H2 server process
    db.vm.provision "shell", :run => 'always', inline: <<-SHELL
      java -cp ./h2*.jar org.h2.tools.Server -web -webAllowOthers -tcp -tcpAllowOthers -ifNotExists > ~/out.txt &
    SHELL
  end

  # Configurations specific to the webserver VM
  config.vm.define "web" do |web|
    web.vm.hostname = "web"
    web.vm.network "private_network", ip: "192.168.56.10"

    # We want to access tomcat from the host using port 8080
    web.vm.network "forwarded_port", guest: 8080, host: 8080

    web.vm.provision "shell", inline: <<-SHELL, privileged: false
      # For this part we are going to install Apache Tomcat. Again to prevent compatibility issues
      # we are going to use Tomcat 10

      sudo mkdir /opt/tomcat/

      cd /tmp

      wget https://archive.apache.org/dist/tomcat/tomcat-10/v10.1.23/bin/apache-tomcat-10.1.23.tar.gz

      sudo tar xzvf apache-tomcat-10*tar.gz -C /opt/tomcat --strip-components=1

      sudo chown -R vagrant:vagrant /opt/tomcat

      # Change the following command to clone your own repository!
      git clone https://github.com/J2PCastro/devops-23-24-PSM-1231836.git
      cd devops-23-24-PSM-1231836/ca2/part2/react-and-spring-data-rest-basic/

      # Uncomment the first line in application.properties
      sed -i '0,/^[ \t]*#server.servlet.context-path=/s//server.servlet.context-path=/g' src/main/resources/application.properties

      # Modify the application.properties file to set SPRING_DATASOURCE_URL
      sed -i 's|spring.datasource.url=.*|spring.datasource.url=jdbc:h2:tcp://192.168.56.11:9092/./jpadb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE|' src/main/resources/application.properties

      # Modify the app.js file to set the correct path
      sed -i "s|path: '/api/employees'|path: '/react-and-spring-data-rest-basic-0.0.1-SNAPSHOT/api/employees'|" src/main/js/app.js

      chmod u+x gradlew
      ./gradlew clean build
      # To deploy the war file to tomcat10 do the following command:
      sudo cp ./build/libs/react-and-spring-data-rest-basic-0.0.1-SNAPSHOT.war /opt/tomcat/webapps/
      # The following command will start tomcat
      sudo /opt/tomcat/bin/startup.sh
    SHELL
  end
end